#
# https://github.com/P3TERX/Actions-OpenWrt
#
# 文件：.github/workflows/openwrt-bulder.yml
# 描述：使用 GitHub Actions 构建 OpenWrt
#
# 版权所有（c）2019-2024 P3TERX <https://p3terx.com>
#
# 这是自由软件，根据 MIT 许可证进行许可。
# 有关更多信息，请参见 /LICENSE。
#

name: OpenWrt Lean Builder  # 工作流名称

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede  # 仓库 URL
  REPO_BRANCH: master  # 仓库分支
  FEEDS_CONF: feeds.conf.default  # 自定义 feeds 配置文件
  CONFIG_FILE: .config  # 配置文件
  DIY_P1_SH: diy-part1.sh  # 自定义脚本1
  DIY_P2_SH: diy-part2.sh  # 自定义脚本2
  UPLOAD_BIN_DIR: false  # 是否上传 bin 目录
  UPLOAD_FIRMWARE: true  # 是否上传固件
  UPLOAD_RELEASE: false  # 是否上传发布
  TZ: Asia/Shanghai  # 时区

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用的操作系统版本

    steps:
    - name: Checkout  # 步骤名称
      uses: actions/checkout@main  # 使用的动作

    - name: Initialization environment  # 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive  # 非交互式前端
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL  # 删除旧文件
        sudo docker image prune --all --force  # 清理 Docker 镜像
        sudo -E apt-get -qq update  # 更新软件包列表
        sudo -E apt-get -qq install ...  # 安装所需软件包
        sudo timedatectl set-timezone "$TZ"  # 设置时区
        sudo mkdir -p /workdir  # 创建工作目录
        sudo chown $USER:$GROUPS /workdir  # 更改工作目录的所有者

    - name: Clone source code  # 克隆源代码
      working-directory: /workdir  # 工作目录
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt  # 克隆仓库
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds  # 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds  # 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds  # 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration  # 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package  # 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        for i in {1..3}; do make download -j8 && break || sleep 5; done
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s || make -j1 V=s || make -j1 V=s V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage  # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory  # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files  # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory  # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_Lean_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

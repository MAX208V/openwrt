name: Delete Workflows

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:      # 手动触发

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Write cleanup script
        run: |
          echo "import os" > cleanup_workflows.py
          echo "import requests" >> cleanup_workflows.py
          echo "from datetime import datetime, timezone" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "# 获取 GitHub Token 和仓库信息" >> cleanup_workflows.py
          echo "GITHUB_TOKEN = os.getenv('TOKEN')" >> cleanup_workflows.py
          echo "REPO = os.getenv('GITHUB_REPOSITORY')" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "# 设置 API 请求头" >> cleanup_workflows.py
          echo "headers = {" >> cleanup_workflows.py
          echo "    'Authorization': f'token {GITHUB_TOKEN}'," >> cleanup_workflows.py
          echo "    'Accept': 'application/vnd.github.v3+json'" >> cleanup_workflows.py
          echo "}" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "# 获取工作流运行列表" >> cleanup_workflows.py
          echo "def get_workflow_runs():" >> cleanup_workflows.py
          echo "    url = f'https://api.github.com/repos/{REPO}/actions/runs'" >> cleanup_workflows.py
          echo "    response = requests.get(url, headers=headers)" >> cleanup_workflows.py
          echo "    response.raise_for_status()" >> cleanup_workflows.py
          echo "    return response.json()['workflow_runs']" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "# 删除工作流运行" >> cleanup_workflows.py
          echo "def delete_workflow_run(run_id):" >> cleanup_workflows.py
          echo "    url = f'https://api.github.com/repos/{REPO}/actions/runs/{run_id}'" >> cleanup_workflows.py
          echo "    response = requests.delete(url, headers=headers)" >> cleanup_workflows.py
          echo "    response.raise_for_status()" >> cleanup_workflows.py
          echo "    print(f'Deleted workflow run {run_id}')" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "# 主函数" >> cleanup_workflows.py
          echo "def main():" >> cleanup_workflows.py
          echo "    # 获取所有工作流运行" >> cleanup_workflows.py
          echo "    runs = get_workflow_runs()" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "    # 过滤出运行时间大于等于5分钟的工作流" >> cleanup_workflows.py
          echo "    valid_runs = [run for run in runs if (datetime.fromisoformat(run['updated_at'].replace('Z', '+00:00')) - datetime.fromisoformat(run['created_at'].replace('Z', '+00:00'))).total_seconds() >= 300]" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "    # 按时间排序（最新的在前）" >> cleanup_workflows.py
          echo "    valid_runs.sort(key=lambda run: run['created_at'], reverse=True)" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "    # 保留最近两条工作流，删除其余的" >> cleanup_workflows.py
          echo "    for run in valid_runs[2:]:" >> cleanup_workflows.py
          echo "        delete_workflow_run(run['id'])" >> cleanup_workflows.py
          echo "" >> cleanup_workflows.py
          echo "if __name__ == '__main__':" >> cleanup_workflows.py
          echo "    main()" >> cleanup_workflows.py

      - name: Run cleanup script
        env:
          TOKEN: ${{ secrets.TOKEN }}  # 使用名为 TOKEN 的 secret
        run: python cleanup_workflows.py
